# if run as "tmux attach", create a session if one does not already exist
# new-session -n $HOST

set -g default-terminal "screen-256color"
set -g status-utf8 on

# force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf \; display "tmux configuration reloaded !!"

# appear as 'screen' to others
set-option -g default-terminal xterm

# Use xterm sequences
set-window-option -g xterm-keys on

# from http://superuser.com/questions/871919/tmux-in-putty-use-ctrl-arrow-to-switch-window
set -g terminal-overrides "xterm*:XT:kLFT5=\eOD:kRIT5=\eOC:kUP5=\eOA:kDN5=\eOB:smkx@:rmkx@"

# 1 based index for windows
set -g base-index 1

# No delay for escape key press
set -sg escape-time 0

# Automatically set window title
# setw -g automatic-rename

# Aggressive resize makes tmux resize if a smaller client is active
setw -g aggressive-resize on

# Use mouse to scroll through terminal output
setw -g mode-mouse on

# Use mouse to select/resize panes, select window
set -g mouse-select-pane on
set -g mouse-resize-pane on
set -g mouse-select-window on

# enable vi keys
setw -g mode-keys vi

set-window-option -g automatic-rename on

# notify us of any activity in other windows
set -g monitor-activity on

# Scroll History
set -g history-limit 30000

# Vertical and horizontal splitting
bind | split-window -h -c "#{pane_current_path}"
bind \ split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Rename window
# bind-key a  command-prompt 'rename-window %%'

# vim/less clear screen one exit
# set-window-option -g alternate-screen on

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n M-h if-shell "$is_vim" "send-keys M-h" "select-pane -L"
bind -n M-j if-shell "$is_vim" "send-keys M-j" "select-pane -D"
bind -n M-k if-shell "$is_vim" "send-keys M-k" "select-pane -U"
bind -n M-l if-shell "$is_vim" "send-keys M-l" "select-pane -R"
bind -n M-\ if-shell "$is_vim" "send-keys M-\\" "select-pane -l"

# Dumb switching to force keys to hit nested vim
bind -n C-M-h send-keys M-h
bind -n C-M-j send-keys M-j
bind -n C-M-k send-keys M-k
bind -n C-M-l send-keys M-l

# Dumb switching to force not sending to vim
bind -n C-H select-pane -L
bind -n C-J select-pane -D
bind -n C-K select-pane -U
bind -n C-L select-pane -R

# Arrow key movement between panes without prefix
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Window switching
bind -n C-, previous-window # <
bind -n C-. next-window # >

# quick pane cycling
unbind ^A
bind ^A select-pane -t :.+

# Cycle through windows
#bind -r C-h select-window -t :-
#bind -r C-l select-window -t :+

bind -r C-h previous-window
bind -r C-l next-window

# Moving windows
bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1

# Resizing Panes
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

bind-key M-j resize-pane -D
bind-key M-k resize-pane -U
bind-key M-h resize-pane -L
bind-key M-l resize-pane -R

## Maximize and restore a pane
#unbind Up
#bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
#unbind Down
#bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp

# copy and paste with system clipboard using xclip
bind C-c run "tmux save-buffer - | xclip -i -sel clipboard"
bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

# automatically renumber tmux windows
set -g renumber-windows on

# Info
set-window-option -g set-titles on
# set-window-option -g set-titles-string "#(tmux ls | awk -F: '{print $1}' | xargs | sed 's/\ / | /g')"
set-window-option -g set-titles-string '#T #{pane_current_path} - (#S) #W'
				# window number,program name, active(or not)

########################
# Colors & Style
#######################

source ~/.tmux/theme.conf
