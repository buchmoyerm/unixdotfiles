#!/bbs/opt/bin/csperl5.12

#use strict;
#use warnings;

use lib "/bbsrc/bin/prod/lib/site_perl";
use lib "/bbsrc/bin/prod/lib/perl";
use lib "/home/lbonanomi2/perl";
#use Production::DRQS;
use Production::DRQS_IW;

use Date::Parse;
use DateTime;
use Getopt::Long;

use Term::ANSIColor;

use Data::Dumper;
use JSON::XS qw( decode_json );

my %almn_map;
my %dvmn_map;
my @misc_drqs;
my %irqs_map;

my $cutoff_dt;

my $bucket = $ARGV[0];
$bucket = '146' unless (length($bucket));

my $d = Production::DRQS->new();

my @status = qw/ Q /;
my @creturn = $d->listTicketsByGroup( $bucket, @status);

for my $tkt (@creturn) {
	parseTicket($tkt, \%dvmn_map, \%almn_map, \%irqs_map, \@misc_drqs);

	#print Dumper($tkt);

	print "\n\n";
}


#==========

sub parseTicket {
	my ($x, $dvmn_href, $almn_href, $irqs_href, $misc_drqs_aref) = @_;

	my $chunk = $d->getDrqsRecordAll($x->{ticketNumber});
	my $ticketNumber = $$chunk{ ticketNumber};
	my $title = $$chunk{ summary };

	print $x->{ticketNumber}." ";

	print $title." ";

	my @logret = $d->getDrqsLog($x->{ticketNumber});

	for my $log (@logret) {
		

		if (defined($log->{text})) {
			my $fulltext = join(" ", @{$log->{text}});
			#print "DRQS $ticketNumber FULLOFIT: $fulltext\n";
			print $fulltext."\n";
		}
	}
}
