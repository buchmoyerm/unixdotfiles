#!/opt/bb/bin/bash

# Written by Michael Yagliyan
# 2015

readonly _THIS="${BASH_SOURCE##*/}"
readonly _DAEMON_MODE_OPT='_daemon'
readonly _LOG="${HOME}/${_THIS}.${HOSTNAME}.log"
readonly _TEST_MODE=false

function findDaemons()
{
    local -a pids
    local pid args
    local -r daemonModeCmd="${_THIS} ${_DAEMON_MODE_OPT}"
    while read pid args; do
        if [[ ${args} == *"${daemonModeCmd}" ]]; then
            pids[${#pids[@]}]=${pid}
        fi
    done < <(ps -u "${LOGNAME}" -o pid= -o args=)
    echo "${pids[@]}"
}

function isEarlierDaemonRunning()
{
    local -a pids=($(findDaemons))
    local pid
    for pid in "${pids[@]}"; do
        if [[ ${pid} -lt $$ ]]; then
            return 0
        fi
    done
    return 1
}

function killDaemons()
{
    local -r allDaemonPIDs=$(findDaemons)
    local sleepPID sleepPPID args
    while read sleepPID sleepPPID args; do
        if [[    ${args} == 'sleep '*
              && " ${allDaemonPIDs} " == *" ${sleepPPID} "* ]]; then
            echo "${_THIS}: stopping daemon running as PID ${sleepPPID}"
            kill -SIGUSR1 "${sleepPID}"
        fi
    done < <(ps -u "${LOGNAME}" -o pid= -o ppid= -o args=)
}

function isLoggedIn()
{
    local -r allUsers=$(users)
    [[    " ${allUsers} " == *" ${LOGNAME} "*
       || " ${allUsers} " == *" ${USER} "* ]]
}

function testLoop()
{
    echo "${_THIS}[$$]: test daemon started at $(date 2>&1)" >>"${_LOG}"
    while sleep 10 && isLoggedIn; do
        echo "${_THIS}[$$]: still logged in at $(date 2>&1)"
    done >>"${_LOG}" 2>&1
    echo "${_THIS}[$$]: test daemon stopped at $(date 2>&1)" >>"${_LOG}"
}

function mainLoop()
{
    local infomsg
    rm -f "${_LOG}"
    echo "${_THIS}: daemon started as PID $$ at $(date 2>&1)" >>"${_LOG}"
    while sleep 12h && isLoggedIn; do
        infomsg="${_THIS}: renewing login token at $(date 2>&1)..."

        # Write to log.
        echo "${infomsg}"

        # Write to all of your TTYs and PTYs on current machine.
        for tty in $(w "${USER}" | awk "/^${USER}/ { print \$2 }"); do
            write "${USER}" "${tty}" <<< "${infomsg}"
        done

        # Renew token.
        "${KINIT_CMD[@]}" -R
    done >>"${_LOG}" 2>&1
    rm -f "${_LOG}"
}

if type -p kinit >/dev/null; then
    KINIT_CMD=(kinit)
elif type -p vastool >/dev/null; then
    KINIT_CMD=(vastool kinit)
else
    echo "${_THIS}: failed to locate appropriate kinit command" 1>&2
    exit 1
fi
readonly KINIT_CMD

readonly MODE=$1
case ${MODE} in
    start )
        daemonRunning=false
        for daemonPID in $(findDaemons); do
            echo "${_THIS}: daemon is already running as PID ${daemonPID}" 1>&2
            daemonRunning=true
        done
        if ${daemonRunning}; then
            exit 1
        fi
        echo "${_THIS}: starting daemon..."
        nohup "${_THIS}" "${_DAEMON_MODE_OPT}" 0<&- &>/dev/null &
        ;;
    stop )
        killDaemons
        ;;
    status )
        daemonRunning=false
        for daemonPID in $(findDaemons); do
            echo "${_THIS}: daemon is running as PID ${daemonPID}"
            daemonRunning=true
        done
        if ! ${daemonRunning}; then
            echo "${_THIS}: daemon is not running"
        fi
        ;;
    ${_DAEMON_MODE_OPT} )
        if isEarlierDaemonRunning; then
            return
        fi
        if ${_TEST_MODE}; then
            testLoop
        else
            mainLoop
        fi
        ;;
    * )
        echo 'Service for automatic renewal of Kerberos authentication token.'
        echo
        echo "Usage: ${_THIS} <start|stop|status>"
        echo
        echo '  start   Start service.'
        echo '  stop    Stop service.'
        echo '  status  Service status.'
        echo
        ;;
esac
