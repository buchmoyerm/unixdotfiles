priority 1

snippet iter "Iterate over a container"
for(${2:contType}${3:::iterator} ${4:it} = ${1:container}.begin(); $4 != $1.end(); ++$4)
{
	${0:${VISUAL}}
}
endsnippet

snippet try "try/catch block"
try
{
	${1:${VISUAL}}
}
catch(${2:const bsl::exception &e})
{
	${3}
}
endsnippet

snippet throw "throw exception"
throw bsl::runtime_error("${1}");
endsnippet

snippet cout "cout"
bsl::cout << ${1} << "\n";
endsnippet

snippet cerr "cerr"
bsl::cerr << ${1} << "\n";
endsnippet

snippet str "bsl::string" w
bsl::string
endsnippet

snippet vec "bsl::vector" w
bsl::vector<${1:T}>
endsnippet

snippet map "bsl::map" w
bsl::map<${1:T1},${2:T2}>
endsnippet

snippet set "bsl::set" w
bsl::set<${1:T}>
endsnippet

snippet umap "bsl::unordered_map" w
bsl::unordered_map<${1:T1},${2:T2}>
endsnippet

snippet uset "bsl::unordered_set" w
bsl::unordered_set<${1:T}>
endsnippet

snippet pair "bsl::pair" w
bsl::pair<${1:T1},${2:T2}>
endsnippet

snippet sptr "shared pointer" w
bsl::shared_ptr<${1:T}>
endsnippet

snippet date "bdlt::date" w
bdlt::Date
endsnippet

snippet dc "dynamic cast" w
dynamic_cast<${1:T}>(${2:${VISUAL}})
endsnippet

snippet sc "static cast" w
static_cast<${1:T}>(${2:${VISUAL}})
endsnippet

snippet rc "reinterpret cast" w
reinterpret_cast<${1:T}>(${2:${VISUAL}})
endsnippet

snippet inc "include"
#include <${1}>
endsnippet

snippet binc "bloomberg include"
#ifndef INCLUDED_`!p snip.rv = t[1].upper()`
#include <${1}.h>
#endif
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
	${VISUAL}$0
}${1/.+/ \/* /m}$1 namespace${1/.+/ *\/ /m}
endsnippet

snippet header "An entire .h generator" b
`!p
filename = os.path.basename(vim.current.buffer.name)
if len(filename.split('_')) == 2:
	module = filename.split('_')[0]
	component = filename.split('_')[1].split('.')[0].capitalize()
else:
	module = "nomodule"
	component = filename.split('.')[0].capitalize()
guard = "INCLUDED_" + module.upper() + "_" + component.upper()
`#ifndef ${4:`!p snip.rv = guard`}
#define $4

#include <sysutil_ident.h>
SYSUTIL_IDENT_RCSID(`!p snip.rv = module`_`!p snip.rv = component.lower()`_h, "$Id$ $CSID$")
SYSUTIL_PRAGMA_ONCE

namespace BloombergLP {
namespace ${3:`!p snip.rv = module`} {

class ${1:`!p snip.rv = component`} {
public:
	$1();
	~$1();

private:
	${2}
};

} /* $3 namespace */
} /* BloombergLP namespace */

#endif // $4
endsnippet

snippet body "An entire .cpp generator" b
`!p
filename = os.path.basename(vim.current.buffer.name)
if len(filename.split('_')) == 2:
	module = filename.split('_')[0]
	component = filename.split('_')[1].split('.')[0]
else:
	module = "nomodule"
	component = filename.split('.')[0]
header = module + "_" + component + ".h"
`#include <${3:`!p snip.rv = header`}>

namespace BloombergLP {
namespace ${2:`!p snip.rv = module`} {

${1}

} /* $2 namespace */
} /* BloombergLP namespace */
endsnippet

snippet mem "member function"
`!p
filename = os.path.basename(vim.current.buffer.name)
component = filename.split('_')[-1].split('.')[0].capitalize()
`${1:void} ${2:`!p snip.rv = component`}::${3:methodName}(${4:/*parameters*/})
{
	${0:${VISUAL}}
}
endsnippet


snippet todo "TODO comment"
// TODO: ${1:Description} - `!v strftime("%Y-%m-%d %I:%M%P")`
endsnippet

snippet log "Log something"
BAEL_LOG_${2:DEBUG} << "${1}" << BAEL_LOG_END;
endsnippet
